* Experimental Evaluation

This repository stores all the experiments code. For making the experiments accurate, we proposed a possible real system requirement list detailed as follows.

** Hypothetical System - Sensor over the Internet
 This section lists the system's requirements used in *Section - Experimental Evaluation*. We provided an example of code that explores different aspects of embedded systems coding. Let us consider the systems has three sensors, network access, Flash access, and has to monitor and make some calculation with the value of the sensors. The following sections detail the features needed. 

*** Requirement - R01
   It should capture samples of 3 different sensors A (1 byte), B (1 byte) and C (4 bytes) every three seconds;

*** Requirement  - R02
	 It must store, in RAM (volatile), the last ten sensors' samples;

*** Requirement  - R03
	It can receive remote requests of six different types:
	 1. *0xa0* - It requests Sensor A data;
	 2. *0xa1* - It requests Sensor B data;
	 3. *0xa2* - It requests Sensor C data;
	 4. *0xa3* - It requests last ten samples Sensor A data mean;
	 5. *0xa4* - It requests last ten samples Sensor B data mean;
	 6. *0xa5* - It requests last ten samples Sensor C data mean;

*** Requirement - R04
  It must store, in Flash (non-volatile), the last sample of sensor A and the last remote response data every 30 seconds. When the system starts, it must recover the flash data;

*** Requirement - R05
  The system receives a random remote request every 30 seconds.

** Implementations
 We implemented three variations of the same hypothetical system. The first tries to mimic the [[https://www.arduino.cc/][Arduino]] way to code (Single-threaded setup/loop); the second employs only RTOS features (Multi-threaded); the last one uses Zeta (Multi-threaded with Zeta).

*** Single-threaded implementation
  This one follows the Arduino implementation approach based on a single thread with all the responsibilities. It this case there is only two separations of code the Setup portions, which implements all the declaration and configuration of the module; and the Loop portion where the code executes.

*** Multi-threaded implementation
  On this implementation, we tried to use acceptable programming practices separating the system's functionality into four modules. The first one is the BOARD responsible for capturing the sensors' samples. The CORE is the central module capable of storing the volatile data, calculate the mean and for responding to remote requests. There is the STORAGE module aimed to store the non-volatile data and restore it when the system starts. The last one is NET able to receive requests and send responses to the remote peer. We tried to keep it simple and used only queues and semaphores.

*** Zeta implementation
  This one is similar to the Multi-threaded implementation in terms of module separation. However, all communication and storage functionality is Zeta responsibility. Consequently, there are only BOARD, CORE, and NET modules whenever the middleware assumes the STORAGE's role.

*** Execution

	Clone this repository to the zephyrproject folder. 

	#+BEGIN_SRC bash
	  cd /home/.../zephyrproject
      git clone <this repository url> 
	#+END_SRC
	Before compiling the samples you have to make sure the env for Zephyr is ok. Execute the following command:

	#+BEGIN_SRC bash
	  source ${ZEPHYR_BASE}/zephyr-env.sh 
	#+END_SRC

	For calculating the memory footprint for this sample, we have to execute this to the nrf52840dongle board:
   
	#+BEGIN_SRC bash
	  cd sensor-over-internet-<variation>
	  CONF_FILE=prj_nrf52840dongle_nrf52840.conf; rm -rf build && west build -b nrf52840dongle_nrf52840
	#+END_SRC
 
	For executing this sample, we have to execute this to the Native Posix board:

	#+BEGIN_SRC bash
	  rm -rf build && west build -b native_posix
	#+END_SRC

	Expected results:
  
	#+begin_example
-- west build: generating a build system
[ZETA]: Running zeta.cmake
[ZETA]: Current dir = /home/.../zephyrproject/experimental_evaluation/sensors-over-internet-<variation>
[ZETA]: ZETA_MODULE_DIR = /home/.../.local/lib/python3.6/site-packages/zeta
[ZETA]: PROJECT_DIR = /home/.../zephyrproject/experimental_evaluation/sensors-over-internet-<variation>/build
[ZETA]: ZETA_DIR =  /home/.../zephyrproject/experimental_evaluation/sensors-over-internet-<variation>/build/zeta
[ZETA]: ZETA_SRC_DIR = /home/.../zephyrproject/experimental_evaluation/sensors-over-internet-<variation>/build/zeta/src
[ZETA]: ZETA_INCLUDE_DIR = /home/.../zephyrproject/experimental_evaluation/sensors-over-internet-<variation>/build/zeta/include
[ZETA]: ZETA_TEMPLATES_DIR = /home/.../.local/lib/python3.6/site-packages/zeta/templates
[ZETA]: Creating Zeta project folder
[ZETA]: Generating zeta.h...[OK]
[ZETA]: Generating zeta.c...[OK]
[ZETA]: Generating zeta.conf...[OK]
Including boilerplate (Zephyr base): /home/.../zephyrproject/zephyr/cmake/app/boilerplate.cmake
-- Application: /home/.../zephyrproject/experimental_evaluation/sensors-over-internet-<variation>
-- Zephyr version: 2.3.0-rc1 (/home/.../zephyrproject/zephyr)
-- Found Python3: /usr/bin/python3.6 (found suitable exact version "3.6.9") found components:  Interpreter 
-- Board: native_posix
-- Found toolchain: zephyr (/home/...//zephyr-sdk-0.11.2)
-- Found west: /home/.../.local/bin/west (found suitable version "0.7.2", minimum required is "0.7.1")
-- Found dtc: /home/.../zephyr-sdk-0.11.2/sysroots/x86_64-pokysdk-linux/usr/bin/dtc (found suitable version "1.5.0", minimum required is "1.4.6")
-- Found toolchain: host (gcc/ld)
-- Found BOARD.dts: /home/.../zephyrproject/zephyr/boards/posix/native_posix/native_posix.dts
-- Generated zephyr.dts: /home/.../zephyrproject/experimental_evaluation/sensors-over-internet-<variation>/build/zephyr/zephyr.dts
-- Generated devicetree_unfixed.h: /home/.../zephyrproject/experimental_evaluation/sensors-over-internet-<variation>/build/zephyr/include/generated/devicetree_unfixed.h
Parsing /home/.../zephyrproject/zephyr/Kconfig
Loaded configuration '/home/.../zephyrproject/zephyr/boards/posix/native_posix/native_posix_defconfig'
Merged configuration '/home/.../zephyrproject/experimental_evaluation/sensors-over-internet-<variation>/prj.conf'
Merged configuration '/home/.../zephyrproject/experimental_evaluation/sensors-over-internet-<variation>/build/zeta/zeta.conf'
Configuration saved to '/home/.../zephyrproject/experimental_evaluation/sensors-over-internet-<variation>/build/zephyr/.config'
Kconfig header saved to '/home/.../zephyrproject/experimental_evaluation/sensors-over-internet-<variation>/build/zephyr/include/generated/autoconf.h'
-- The C compiler identification is GNU 7.5.0
-- The CXX compiler identification is GNU 7.5.0
-- The ASM compiler identification is GNU
-- Found assembler: /usr/bin/gcc
-- Cache files will be written to: /home/.../.cache/zephyr
[ZETA]: Set Zeta as a zephyr module
-- Configuring done
-- Generating done
-- Build files have been written to: /home/.../zephyrproject/experimental_evaluation/sensors-over-internet-<variation>/build
-- west build: building application
[1/104] Preparing syscall dependency handling

[104/104] Linking C executable zephyr/zephyr.elf
	#+end_example

	#+BEGIN_SRC bash
	  west build -t run
	#+END_SRC
